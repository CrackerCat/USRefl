// This file is generated by Ubpa::USRefl::AutoRefl

#pragma once

#include <USRefl/USRefl.h>

template<typename T>
struct Ubpa::USRefl::TypeInfo<Ubpa::Nested::Vec<T>> :
    TypeInfoBase<Ubpa::Nested::Vec<T>>
{
#ifdef UBPA_USREFL_NOT_USE_NAMEOF
    // [!] all instance types have the same name
    static constexpr char name[18] = "Ubpa::Nested::Vec";
#endif
    static constexpr AttrList attrs = {
        Attr {USTR("size"), sizeof(T)},
    };
    static constexpr FieldList fields = {
        Field {USTR(_USRefl::constructor), WrapConstructor<Ubpa::Nested::Vec<T>()>()},
        Field {USTR(_USRefl::constructor), WrapConstructor<Ubpa::Nested::Vec<T>(T, T)>()},
        Field {USTR(_USRefl::destructor), WrapDestructor<Ubpa::Nested::Vec<T>>()},
        Field {USTR("x"), &Ubpa::Nested::Vec<T>::x, AttrList {
            Attr {USTR("not_serialize")},
        }},
        Field {USTR("y"), &Ubpa::Nested::Vec<T>::y, AttrList {
            Attr {USTR("info"), "hello"},
            Attr {USTR("maximum"), 10.f},
        }},
        Field {USTR("num"), &Ubpa::Nested::Vec<T>::num, AttrList {
            Attr {USTR(_USRefl::initializer), []{ return size_t{ 0 }; }},
        }},
        Field {USTR("Sum"), static_cast<float(Ubpa::Nested::Vec<T>::*)()const>(&Ubpa::Nested::Vec<T>::Sum)},
        Field {USTR("Sum"), static_cast<float(Ubpa::Nested::Vec<T>::*)(float, float)const>(&Ubpa::Nested::Vec<T>::Sum), AttrList {
            Attr {USTR(_USRefl::default_functions), std::tuple {
                [](Ubpa::Nested::Vec<T> const* __this, float z){ return __this->Sum(std::forward<float>(z)); }
            }},
        }},
        Field {USTR("Dot"), &Ubpa::Nested::Vec<T>::Dot},
    };
};

